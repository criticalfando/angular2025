
// Instalar nodejs + Angular

Terminal: npm install -g @angular/cli

/////

Para crear un proyecto debemos usar

ng new nombreApp

/// 

Para abrir una pagina de Angular habria que usar: 

ng serve -o

//

Eliminar componentes Router en .ts
Eliminar contenido del .html

// 

Edicion de la pagina es en 

/src/app/app.component.ts - Scripts
/src/app/app.component.html - HTML

///

Para crear funciones en typescript

funcion():tipo{

}

edad:number;
edad=20;
const descuento:number=10;
iva.boolean=true


/// Tipos de datos de Typescript:

void: Tipo vacio
number: Tipo numeral
string: 
boolean: True/False
HTMLElement: Para recoger desde el HTML

// Desactivar "strict:" en tsconfig.json 

// Similar al id, pero creando una variable directamente para recogerla en otro lugar sin dom.getelement
Para utilizarla debemos a単adir a los imports:
    imports: [FormsModule],

[{ngModel}]="codigo"

// 
{{}} se referiere a un interpolador, que es util para injectar una variable.

//
Para hacer llamadas a fuera de la funcion usamos "this."

//
@component es llamado "decorador"

//
Para importar librerias a Angular:

en el decorador a単adir: 
  imports: [modulo],

//Para crear un workspace
ng new cursoWorkspace --no-create-application

// para crear una aplicacion con un workspace se usa
ng generate application "name"

// Para ejecutar una aplicacion dentro de un workspace
ng serve "name" -o 

// Propiedad para generar algo tantas veces como se le es indicado
Para utilizarla debemos a単adir a los imports:
    imports: [CommonModule],
Para recorrer un array:

*ngFor="let variable of array"

Para hacer algo en caso de ser true:
*ngIf=true/false

// JSON en Typescript

let persona{nombre:"nando",edad:23,email:"nando@gmail.com"};

Son manejados por clases 
|
\/

export class Persona{
  nombre:string;
  edad:number;
  email:string;
}

Habria que crear el objeto con:

// El nombre de la variable es indiferente
let p=new Persona();
p.nombre="Nando";
p.edad=27;
p.email="Nando@gmail.com";

// Se crea un archivo en model/nombre.ts para el objeto

Con: 
export class Contacto{
  nombre:string;
  constructor(nombre:string,email:string,telefono:string){
    this.nombre=nombre;
    this.email=nombre;
    this.telefono=telefono;

  }
}

Puede incluir una funcion llamada constructor


Para crear un conjunto en TS, debemos de indicar de que tipo es: 
variable=Set<tipo>

SPA: Single PAge Application

Creacion de rutas

etiqueta <a routerLink="/url"></a>

se puede realizar por codigo
this.router.navigate([/url])

se realiza en la tabla de rutas, app.routes

Routes=({
  path:"url",
  component:"",
})


// Bases de datos

Lenguaje universal para acceder a bases de datos relacionales

Sentencias de alto nivel

Dos grupos de instrucciones:
  DDL: Instrucciones para crear y manipular la estructura de las tablas

  DML: Instrucciones para la manipulacion de datos.
    Select: Recuperacion 
      SELECT campo1,campo2, FROM tabla WHERE condition
    Insert: a単adir
      INSERT INTRO tabla (campo1,campo2,...) values (valor1,valor2,...)
    Delete: Eliminacion

    Update: Actualizacion

1. Lista de movimientos de la cuenta 1000 - 

  SELECT

2. Subir 100 euros a todos los movimientos de tipo ingreso - 

  UPDATE bancabd.movimientos SET cantidad=cantidad+100 WHERE operacion="ingreso"

3. Lista de movimientos de las cuentas de ahorro -

  SELECT * FROM bancabd.cuentas WHERE tipocuenta="ahorro"
  SELECT * FROM bancabd.movimientos WHERE idCuenta="1000,2000,4000"
  
3.2 Lista de movimientos de las cuentas de ahorro (join)-

  SELECT * FROM bancabd.movimientos where idCuenta in 
  (select numeroCuenta from bancabd.cuentas where tipoCuenta="ahorro");

  SELECT * FROM bancabd.movimientos 
  inner join bancabd.cuentas on movimientos.idCuenta = cuentas.numeroCuenta 
  where cuentas.tipocuenta = "ahorro";