
// Instalar nodejs + Angular

Terminal: npm install -g @angular/cli

/////

Para crear un proyecto debemos usar

ng new nombreApp

/// 

Para abrir una pagina de Angular habria que usar: 

ng serve -o

//

Eliminar componentes Router en .ts
Eliminar contenido del .html

// 

Edicion de la pagina es en 

/src/app/app.component.ts - Scripts
/src/app/app.component.html - HTML

///

Para crear funciones en typescript

funcion():tipo{

}

edad:number;
edad=20;
const descuento:number=10;
iva.boolean=true


/// Tipos de datos de Typescript:

void: Tipo vacio
number: Tipo numeral
string: 
boolean: True/False
HTMLElement: Para recoger desde el HTML

// Desactivar "strict:" en tsconfig.json 

// Similar al id, pero creando una variable directamente para recogerla en otro lugar sin dom.getelement
Para utilizarla debemos aÃ±adir a los imports:
    imports: [FormsModule],

[{ngModel}]="codigo"

// 
{{}} se referiere a un interpolador, que es util para injectar una variable.

//
Para hacer llamadas a fuera de la funcion usamos "this."

//
@component es llamado "decorador"

//
Para importar librerias a Angular:

en el decorador aÃ±adir: 
  imports: [modulo],

//Para crear un workspace
ng new cursoWorkspace --no-create-application

// para crear una aplicacion con un workspace se usa
ng generate application "name"

// Para ejecutar una aplicacion dentro de un workspace
ng serve "name" -o 

// Propiedad para generar algo tantas veces como se le es indicado
Para utilizarla debemos aÃ±adir a los imports:
    imports: [CommonModule],
Para recorrer un array:

*ngFor="let variable of array"

Para hacer algo en caso de ser true:
*ngIf=true/false

// JSON en Typescript

let persona{nombre:"nando",edad:23,email:"nando@gmail.com"};

Son manejados por clases 
|
\/

export class Persona{
  nombre:string;
  edad:number;
  email:string;
}

Habria que crear el objeto con:

// El nombre de la variable es indiferente
let p=new Persona();
p.nombre="Nando";
p.edad=27;
p.email="Nando@gmail.com";

// Se crea un archivo en model/nombre.ts para el objeto

Con: 
export class Contacto{
  nombre:string;
  constructor(nombre:string,email:string,telefono:string){
    this.nombre=nombre;
    this.email=nombre;
    this.telefono=telefono;

  }
}

Puede incluir una funcion llamada constructor


Para crear un conjunto en TS, debemos de indicar de que tipo es: 
variable=Set<tipo>

SPA: Single PAge Application

Creacion de rutas

etiqueta <a routerLink="/url"></a>

se puede realizar por codigo
this.router.navigate([/url])

se realiza en la tabla de rutas, app.routes

Routes=({
  path:"url",
  component:"",
})


// Bases de datos

Lenguaje universal para acceder a bases de datos relacionales

Sentencias de alto nivel

Dos grupos de instrucciones:
  DDL: Instrucciones para crear y manipular la estructura de las tablas

  DML: Instrucciones para la manipulacion de datos.
    Select: Recuperacion 
      SELECT campo1,campo2, FROM tabla WHERE condition
    Insert: aÃ±adir
      INSERT INTRO tabla (campo1,campo2,...) values (valor1,valor2,...)
    Delete: Eliminacion

    Update: Actualizacion

1. Lista de movimientos de la cuenta 1000 - 

  SELECT

2. Subir 100 euros a todos los movimientos de tipo ingreso - 

  UPDATE bancabd.movimientos SET cantidad=cantidad+100 WHERE operacion="ingreso"

3. Lista de movimientos de las cuentas de ahorro -

  SELECT * FROM bancabd.cuentas WHERE tipocuenta="ahorro"
  SELECT * FROM bancabd.movimientos WHERE idCuenta="1000,2000,4000"

3.2 Lista de movimientos de las cuentas de ahorro (join)-

  SELECT * FROM bancabd.movimientos where idCuenta in 
  (select numeroCuenta from bancabd.cuentas where tipoCuenta="ahorro");

  SELECT * FROM bancabd.movimientos 
  inner join bancabd.cuentas on movimientos.idCuenta = cuentas.numeroCuenta 
  where cuentas.tipocuenta = "ahorro";

  SELECT movimientos.* FROM bancabd.movimientos,bancabd.cuentas 
  where  movimientos.idCuenta = cuentas.numeroCuenta and cuentas.tipocuenta = "ahorro";

  SELECT c.* 
  FROM bancabd.movimientos as c 
  join bancabd.cuentas d
  on c.idCuenta = d.numeroCuenta
  where tipocuenta="ahorro";

4. Sacar el nombre y el dni de los propietarios de las cuentas de "1000"

  SELECT clientes.nombre, clientes.dni 
  FROM bancabd.clientes
  JOIN bancabd.titulares 
  ON titulares.idcliente = clientes.dni
  JOIN bancabd.cuentas
  ON cuentas.numerocuenta = titulares.idCuenta
  WHERE cuentas.numerocuenta="1000";


4. Sacar los dni de las personas que tengan cuentas con mas de 1000 euros

  SELECT clientes.nombre, clientes.dni , cuentas.numeroCuenta
  FROM bancabd.clientes
  JOIN bancabd.titulares 
  ON titulares.idcliente = clientes.dni
  JOIN bancabd.cuentas
  ON cuentas.numerocuenta = titulares.idCuenta
  WHERE cuentas.saldo>="1000";


Servicios REST 


Peticiones HTTP desde Angular

Se realizan a traves del componente HttpClient en la libreria http 

Este componenete debe ser utilizado desde un ervicio

export class HttpService {
  constructor(private http:HttpClient){
  
  }
}

El proveedor del modulo debe ser declarado en app.config:

export const appConfig: ApplicationConfig = {
  providers: [provideHttpClient(),...]
}

Querys HTTP:

GET
  Devuelve un Observable<Object>
    Observable: Una peticion HTTP te devuelve un observable, y el componente controlador se puede subscribir,
    para procesar el resultado cuanto este disponible.

    public obtener(): Observable<Algo>{
      return this.http.get<Pais[]>(this.url);
    }

    cargarAlgo():void{
      this.algoservice.obteneralgo().subscribe(data=>this.algo=data)
    }
POST
PUT
DELETE


/// Ejercicio del 12/05

Antonio MartÃ­n
Antonio MartÃ­n dice://mÃ©todo que devuelva un observable con un array de string (nombres de continente)
  continentes()ðŸ˜®bservable<string[]>{
    return this.http.get<Pais[]>(this.url) //Observable<Pais[]>
    //.pipe(map(paises=>
paises.map
(p=>p.region))) //Observable<string[]>; AsÃ­ habrÃ­a quedado si no hubieramos tenido que quitar duplicados
    .pipe(map(paises=>[...new Set(
paises.map
(p=>p.region))])) //Observable<string[]>;
  }
  //mÃ©todo que devuelve un observable con los pasises del continente recibido
  paisesContinente(continenteðŸ˜’tring)ðŸ˜®bservable<Pais[]>{
    return this.http.get<Pais[]>(this.url) //Observable<Pais[]>
    .pipe(map(paises=>paises.filter(p=>p.region==continente)));
  } 

10:22

Antonio MartÃ­n dice:continentesðŸ˜’tring[];
  continenteSeleccionadoðŸ˜’tring;
  paisesContinenteðŸ˜›ais[];
  constructor(private paisesServiceðŸ˜›aisesService){
    this.paisesService.continentes() //Observable<string[]>
    .subscribe(resultado=>this.continentes=resultado);
  }
  cargarPaisesContinente():void{
    this.paisesService.paisesContinente(this.continenteSeleccionado)//Observable<Pais[]>
    .subscribe(resultado=>this.paisesContinente=resultado);

  } 

10:37

A
Ariani
Ariani dice:<div class="container">



Seleccione  temÃ¡tica:
<select [(ngModel)]="continente" (change)="paisesPorContinente()">

  <option *ngFor="let t of continentes" value="{{t}}">
    {{t}}
  </option>
</select>
  <table class="table table-striped" *ngIf="resultado">
  <thead>
<tr>
  <th>Nombre</th>
  <th>Capital</th>
  <th>Continente</th>
  <th>PoblaciÃ³n</th>
  <th>Bandera</th>
  </tr>
</thead>
<tbody>
  <tr *ngFor="let c of resultado">
    <td>{{
c.name
}}</td>
    <td>{{
c.capital
}}</td>
    <td>{{c.region}}</td>
    <td>{{c.population}}</td>
    <td><img src="{{c.flag}}" width="50px"> </td>
  </tr>
</tbody>
</table>
</div> 

10:38



avatar
Antonio MartÃ­n
Antonio MartÃ­n dice:<div class="container">
  Seleccione  continente:
  <select [(ngModel)]="continenteSeleccionado" (change)="cargarPaisesContinente()">

    <option *ngFor="let t of continentes" value="{{t}}">
      {{t}}
    </option>
  </select>



  <br><br>
  <table class="table table-striped" *ngIf="paisesContinente">
    <thead>
      <tr>
        <th>Nombre</th>
        <th>Capital</th>
        <th>Continente</th>
        <th>PoblaciÃ³n</th>
        <th>Bandera</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let p of paisesContinente">
        <td>{{
p.name
}}</td>
        <td>{{
p.capital
}}</td>
        <td>{{p.region}}</td>
        <td>{{p.population}}</td>
        <td><img src="{{p.flag}}" width="50px"></td>
      </tr>
    </tbody>
  </table>
</div> 

10:47

Fellow Jitster
Fellow Jitster dice:Horacio 

10:54

Fellow Jitster dice:import { Component } from '@angular/core';
import { PaisesService } from '../../serivce/paises.service';
import { Pais } from '../../model/Pais';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-paises',
  imports: [CommonModule, FormsModule],
  templateUrl: './paises.component.html',
  styleUrl: './paises.component.css'
})


export class PaisesComponent {
continentesðŸ˜’tring[];
continenteSeleccionadoðŸ˜’tring;
paisesContinenteðŸ˜›ais[];
constructor(private paisesServiceðŸ˜›aisesService){
  this.paisesService.continentes()//Observable string
 .subscribe(resultado=>this.continentes=resultado);

}
cargarPaisesContinente():void{
  this.paisesService.paisesContinente(this.continenteSeleccionado)//Observable<Pais[]>
  .subscribe(resultado=>this.paisesContinente=resultado);
} 

10:54

Fellow Jitster dice:import { Component } from '@angular/core';
import { PaisesService } from '../../serivce/paises.service';
import { Pais } from '../../model/Pais';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-paises',
  imports: [CommonModule, FormsModule],
  templateUrl: './paises.component.html',
  styleUrl: './paises.component.css'
})


export class PaisesComponent {
continentesðŸ˜’tring[];
continenteSeleccionadoðŸ˜’tring;
paisesContinenteðŸ˜›ais[];
constructor(private paisesServiceðŸ˜›aisesService){
  this.paisesService.continentes()//Observable string
 .subscribe(resultado=>this.continentes=resultado);

}
cargarPaisesContinente():void{
  this.paisesService.paisesContinente(this.continenteSeleccionado)//Observable<Pais[]>
  .subscribe(resultado=>this.paisesContinente=resultado);
} 

10:54

avatar
Antonio MartÃ­n
Antonio MartÃ­n dice:paisesContinente(continenteðŸ˜’tring)ðŸ˜®bservable<Pais[]>{
    return this.http.get<Pais[]>(this.url) //Observable<Pais[]>
    .pipe(map(paises=>paises.filter(p=>p.region==continente)));
  } 

10:59

Fellow Jitster
Fellow Jitster dice:export class PaisesService {
  urlðŸ˜’tring= "
https://restcountries.com/v2/all
";
  constructor(private http: HttpClient) {} 


// Docker Image 14/05/2025

docker pull ajms666/imagenescurso:buscador

docker run --name=buscador -p 8000:8000 ajms666/imagenescurso:buscador

// Install json-server

npm install -g json-server

// Iniciar 

json-server --watch nombre.json






